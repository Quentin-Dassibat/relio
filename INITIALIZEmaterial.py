# Copyright (c) Quentin DASSIBAT <qdassibat@gmail.com>

#Ecole des Mines de Saint-Etienne (EMSE)
#Ecole Nationale des Travaux Publics de l'Etat (ENTPE)
#Ecole Urbaine de Lyon (EUL)

# Source Code License (GPLv3)

#This software and its source code are licensed under the GNU General Public License (GPL), version 3.0 or later. See the LICENSE file for details.

# Output License (CC BY 4.0)

#Any outputs generated by this software, such as data files, images, or other results, are licensed under the Creative Commons Attribution 4.0 International License (CC BY 4.0).

#You are free to share, adapt, and use these outputs, provided you give appropriate credit to the original author(s). See the LICENSE file for details.

# For details about each license, please refer to:
#- GNU General Public License (GPL), version 3.0: https://www.gnu.org/licenses/gpl-3.0.html
#- Creative Commons Attribution 4.0 International License (CC BY 4.0): http://creativecommons.org/licenses/by/4.0/ 


##################
# Set parameters #
##################

#Import libraries
import os
import relio
import numpy as np
import datetime
from osgeo import gdal, osr
gdal.UseExceptions()

#Set path and working directories
wd = os.getcwd()
InputModelDirectory = f"{wd}/MODEL_inputs"
hydrographicDirectory = f"{wd}/HYDRO_inputs"
tmpDirectory = f"{wd}/tmp"
if os.path.isdir(tmpDirectory) is False:
    os.mkdir(f"{wd}/tmp")
else:
    pass
outputDirectory = f"{wd}/RESAMPLINGoutputs"
if os.path.isdir(outputDirectory) is False:
    os.mkdir(f"{wd}/RESAMPLINGoutputs")
else:
    pass

#Set parameters
EPSG = 4326
epsilonAccuflux = 1e1
DEM = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_envelope5.tif"
DEMresolution = 30 #in meters

##################
# Execute module #
##################
globstart = datetime.datetime.now()


#Create the initial conditions array

#Populate an array with inflowing values and index values (manualy read from accuflux_indexing.tif in QGIS)
# [channel_length_in_meters,accuflux_index]
# 'channel_length_in_meters' is retrieved from 'length' column of layer "./envelope5_xtended_channels_90.0percent.gpkg" and comes from module SETenvelope.py
# or from layer "./envelope5_xtended_channels_90.0percent_FlowingInOutUpstreamSections.gpkg" in the case that the channel is crossing the envelope 
# 'accuflux_index' is retrieved from band 2 of raster "./DEMx_SRTM30_wgs84_pcraster_accuflux_sup10.0_indexing.tif" and comes ffom module INITIALIZEaccuflux.py
inflowsList = [
    [15224,30411],
    [8765,44515],
    [12300,64371],
    [420161,2950395],
    [197863,7179703],
    [15961,7891207],
    [13613,11006857],
    [12659,12284727],
    [16441,13549393],
    [31628,13674604],
    [23264,15167876],
    [9885,16757320],
    [10141,18147171],
    [22434,18410631],
    [19115,18772927],
    [8181,19220836],
    [11392,20287912],
    [45686,21453842],
    [10130,22955679],
    [281209,25702468],
    [27238,27237240],
    [15033,27572905],
    [22963,27617339],
    [8950,27656446],
    [20096,27615941],
    [56738,27385161],
    [80576,27621428],
    [38798,27634419],
    [20423,27581411],
    [80032,27619888],
    [15014,27599924],
    [20831,27059399],
    [21776,24944971],
    [41286,21453865],
    [21558,20031070],
    [8040,18002287],
    [8658,17778317],
    [21385,16210622],
    [30398,13029125],
    [27296,12271585],
    [22750,10605078],
    [21517,10295497],
    [15046,4907324],
    [9107,3813904],
    [9791,2601884],
    [30234,2107862]
]

inflows = np.array(inflowsList)
initCondArr = inflows
h,w = inflows.shape
for y in range(h):
    initCondArr[y,0] = np.float32(inflows[y,0]/DEMresolution)
    
#Create material
msk = DEM
dst = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_material_initialized.tif"
relio.create_material(msk,dst,EPSG,1,np.array(initCondArr))
del msk, dst


print("Total Elapsed Time: ", datetime.datetime.now()-globstart)

with open(f"{tmpDirectory}/log.txt", 'a') as file:
    file.write(f"INITIALIZEmaterial.py Elapsed Time: {str(datetime.datetime.now()-globstart)}\n")