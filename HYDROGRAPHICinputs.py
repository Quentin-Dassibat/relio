# Copyright (c) Quentin DASSIBAT <qdassibat@gmail.com>

#Ecole des Mines de Saint-Etienne (EMSE)
#Ecole Nationale des Travaux Publics de l'Etat (ENTPE)
#Ecole Urbaine de Lyon (EUL)

# Source Code License (GPLv3)

#This software and its source code are licensed under the GNU General Public License (GPL), version 3.0 or later. See the LICENSE file for details.

# Output License (CC BY 4.0)

#Any outputs generated by this software, such as data files, images, or other results, are licensed under the Creative Commons Attribution 4.0 International License (CC BY 4.0).

#You are free to share, adapt, and use these outputs, provided you give appropriate credit to the original author(s). See the LICENSE file for details.

# For details about each license, please refer to:
#- GNU General Public License (GPL), version 3.0: https://www.gnu.org/licenses/gpl-3.0.html
#- Creative Commons Attribution 4.0 International License (CC BY 4.0): http://creativecommons.org/licenses/by/4.0/ 


##################
# Set parameters #
##################

#Import libraries
import os
import relio
import numpy as np
import datetime

#Set path and working directories
wd = os.getcwd()
InputModelDirectory = f"{wd}/MODEL_inputs"
hydrographicDirectory = f"{wd}/HYDRO_inputs"
tmpDirectory = f"{wd}/tmp"
if os.path.isdir(tmpDirectory) is False:
    os.mkdir(f"{wd}/tmp")
else:
    pass
outputDirectory = f"{wd}/RESAMPLINGoutputs"
if os.path.isdir(outputDirectory) is False:
    os.mkdir(f"{wd}/RESAMPLINGoutputs")
else:
    pass

#Set parameters
EPSG = 4326
epsilonAccuflux = 1e3
DEM = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_envelope5.tif"

##################
# Execute module #
##################
globstart = datetime.datetime.now()

#Bunch of code to set to True if not already executed in INITIALIZEaccuflux.py

executeBunch = False

if executeBunch is True:

    #Generate flow direction map 
    
    print("Convert .tif DEM to PCRaster")
    start = datetime.datetime.now()
    dst = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_pcraster.map"
    relio.convert_to_pcraster(DEM,dst,EPSG,DEM)
    print("Elapsed time: ", datetime.datetime.now()-start)
    del dst
    
    #Set clone map for PCRaster functions
    cln = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_pcraster.map"
    
    print("Create flow direction map")
    start = datetime.datetime.now()
    src = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_pcraster.map"
    dst = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_pcraster_flowdir.map"
    relio.create_flowdirection(src,dst,cln,1e31,1e31,1e31,1e31)
    print("Elapsed time: ", datetime.datetime.now()-start)
    del src, dst
    
    print("Convert flow direction .map to .tif file")
    start = datetime.datetime.now()
    src = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_pcraster_flowdir.map"
    dst = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_pcraster_flowdir.tif"
    relio.convert_to_geotiff(src,dst,EPSG)
    print("Elapsed time: ", datetime.datetime.now()-start)
    del src, dst

else:
    
    #Set clone map for PCRaster functions
    cln = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_pcraster.map"


#Create accuflux map with threshold epsilon

print("Convert material .tif file to PCRaster")
start = datetime.datetime.now()
src = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_material_initialized.tif"
dst = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_material_initialized_pcraster.map"
mask = DEM
relio.convert_to_pcraster(src,dst,EPSG,mask)
print("Elapsed time: ", datetime.datetime.now()-start)
del src, dst, mask

print("Generate accuflux map")
start = datetime.datetime.now()
flowdirection = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_pcraster_flowdir.map"
mater = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_material_initialized_pcraster.map"
dst = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_pcraster_accuflux.map"
relio.create_accuflux(flowdirection,mater,dst,cln)
print("Elapsed time: ", datetime.datetime.now()-start)
del flowdirection, mater, dst, cln

print("Convert the above accuflux raster to .tif file")
start = datetime.datetime.now()
src = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_pcraster_accuflux.map"
dst = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_pcraster_accuflux.tif"
relio.convert_to_geotiff(src,dst,EPSG)
print("Elapsed time: ", datetime.datetime.now()-start)
del src, dst

print("Filter accuflux with a cutoff epsilon (i.e. only retrieve those cells in accuflux map that accumulate bigger than epsilon)")
start = datetime.datetime.now()
src = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_pcraster_accuflux.tif"
dst = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_pcraster_accuflux_sup{str(epsilonAccuflux)}.tif"
calc = f"numpy.where(A>{np.float32(epsilonAccuflux)},A,numpy.nan)" #not zero for False case to further apply log10 function for vizualisation purpose
cmd = 'gdal_calc.py --overwrite --calc "{calc}" --format GTiff --type Float32 --extent=intersect --NoDataValue={nd} -A {src} --A_band 1 --outfile {dst}'.format(nd="'none'",src=src,dst=dst,calc=calc) #new scalar raster intersecting the AoI
os.system(cmd)
print("Elapsed time: ", datetime.datetime.now()-start)
del src, dst

print("Total Elapsed Time: ", datetime.datetime.now()-globstart)

with open(f"{tmpDirectory}/log.txt", 'a') as file:
    file.write(f"HYDROGRAPHICinputs.py Elapsed Time: {str(datetime.datetime.now()-globstart)}\n")