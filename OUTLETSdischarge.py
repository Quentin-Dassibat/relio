# Copyright (c) Quentin DASSIBAT <qdassibat@gmail.com>

#Ecole des Mines de Saint-Etienne (EMSE)
#Ecole Nationale des Travaux Publics de l'Etat (ENTPE)
#Ecole Urbaine de Lyon (EUL)

# Source Code License (GPLv3)

#This software and its source code are licensed under the GNU General Public License (GPL), version 3.0 or later. See the LICENSE file for details.

# Output License (CC BY 4.0)

#Any outputs generated by this software, such as data files, images, or other results, are licensed under the Creative Commons Attribution 4.0 International License (CC BY 4.0).

#You are free to share, adapt, and use these outputs, provided you give appropriate credit to the original author(s). See the LICENSE file for details.

# For details about each license, please refer to:
#- GNU General Public License (GPL), version 3.0: https://www.gnu.org/licenses/gpl-3.0.html
#- Creative Commons Attribution 4.0 International License (CC BY 4.0): http://creativecommons.org/licenses/by/4.0/ 


##################
# Set parameters #
##################

#Import libraries
import os
import relio
import numpy as np
import pandas as pd
import geopandas as gpd
import datetime
import ast

#Set path and working directories

wd = os.getcwd()
InputModelDirectory = f"{wd}/MODEL_inputs"
hydrographicDirectory = f"{wd}/HYDRO_inputs"

tmpDirectory = f"{wd}/tmp"
if os.path.isdir(tmpDirectory) is False:
    os.mkdir(f"{wd}/tmp")
else:
    pass

outputDirectory = f"{wd}/RESAMPLINGoutputs"
if os.path.isdir(outputDirectory) is False:
    os.mkdir(f"{wd}/RESAMPLINGoutputs")
else:
    pass


#Set parameters
EPSG = 4326
epsilonAccuflux = 1e3
epsilonOutlet = 1e3
modelRun = "DIST"
bandNumber = 12


##################
# Execute module #
##################
globstart = datetime.datetime.now()

print("Load OUTLETSlocation layer") #In pratice, outlets location has been computed for band1 and is only dependent on accuflux, so OutletsLocationBand1 is used for all rasters
gdfOutletsValues = gpd.read_file(f"{outputDirectory}/OutletsLocations_sup{str(epsilonOutlet)}_mod{modelRun}_band1_points.gpkg")

print("Add WBMcells values to the dataframe")

start = datetime.datetime.now()

print("Create a gdf with WBMvalues")
src = f"{InputModelDirectory}/WBM_TerraClimate_OUTPUTQ_{modelRun}_mLTM_2000-2020_band{str(bandNumber)}_clip.tif"
WBMvalues = relio.extract_cellsValues(src) 
del src
gdfWBMvalues = relio.cells_to_polygons(WBMvalues,EPSG)

print("Rename 'values' column label to 'WBMvalues'")
gdfWBMvalues['WBMvalues'] = gdfWBMvalues['values']
gdfWBMvalues.drop(['values'],axis=1,inplace=True)

print("Spatial join between gdfOutletsValues and gdfWBMvalues")
gdfjOutletsValues = gpd.sjoin(gdfOutletsValues, gdfWBMvalues, how='left',
                              predicate='intersects', lsuffix='outlets', rsuffix='wbm')

print("Drop useless columns and NaN rows and duplicates in the column 'id_outlets'")
gdfjOutletsValues.drop(['index_wbm'],axis=1,inplace=True)
gdfjOutletsValues.dropna(subset=['AccufluxValues'],axis=0,inplace=True)
print(gdfjOutletsValues.dtypes)
print(gdfjOutletsValues.head())
gdfjOutletsValues.drop_duplicates(subset=['id_outlets'],inplace=True)

print("Elapsed time: ", datetime.datetime.now()-start)



print("Compute discharges at OUTflow outlets") 
#with the formula: 
#Qij = (Qj - sigma(QTRANS)) * rho_i
#i.e. Qi is the shared value of the corresponding WBM value minus the fraction of flow transfered to another WBMcell

#Do the calculation for each unique 'id_wbm' and then concatenate dataframes

wbmCells = list(set(gdfjOutletsValues['id_wbm']))
l = []
start = datetime.datetime.now()

for cell in wbmCells:
    
    mask = gdfjOutletsValues['id_wbm'] == cell
    tmp = gdfjOutletsValues.loc[mask]
    
    mask2 = tmp['OUTflow'] == "False"
    tmp2 = tmp.loc[mask2]
    RHOtrans = tmp2['AccufluxValues'].sum()/tmp['AccufluxValues'].sum()
    Qtrans = tmp['WBMvalues']*RHOtrans
    tmp.loc[:,'Qtrans_glob'] = Qtrans
    tmp.loc[:,'Qout_glob'] = tmp['WBMvalues']-Qtrans
    
    mask3 = tmp['OUTflow'] == "True"
    tmp3 = tmp.loc[mask3]
    tmp3['RHOout'] = tmp3['AccufluxValues']/tmp3['AccufluxValues'].sum()
    tmp3['Qout_outlet'] = tmp3['RHOout']*tmp3['Qout_glob']
    
    l.append(tmp3)

df = pd.concat(l)


print("Save dataframe as gpkg") 



start = datetime.datetime.now()

print("Fiona cannot interpret Python's tuples contained in 'id_outlets' and 'id_wbm' so turn them to strings in new columns 'uid_outlets' and 'uid_wbm'")
strings = list(df['id_outlets'])
tuples = [ast.literal_eval(x) for x in strings]
string = []
for elem in tuples:
    y,x = elem
    string.append(f"({str(y)}"+','+f"{str(x)})")
df.loc[:,'uid_outlets'] = string
df.drop(['id_outlets'],axis=1,inplace=True)
tup = list(df['id_wbm'])
string = []
for elem in tup:
    y,x = elem
    string.append(f"({str(y)}"+','+f"{str(x)})")
df.loc[:,'uid_wbm'] = string
df.drop(['id_wbm'],axis=1,inplace=True)

print("Convert outlet discharges geodataframe from polygons to points") 
df.to_crs(crs=f"EPSG:{str(EPSG)}",inplace=True)
df["centroid"] = df["geometry"].centroid
df.drop(['geometry'],axis=1,inplace=True)
df.loc[:,'geometry'] = df.loc[:,'centroid']
df.drop(['centroid'],axis=1,inplace=True)
df.set_geometry("geometry",crs=f"EPSG:{str(EPSG)}",inplace=True)

print("Export gdf as .gpkg")
path = f"{outputDirectory}/OutletsDischarges_sup{str(epsilonOutlet)}_mod{modelRun}_band{str(bandNumber)}_points.gpkg"
df.to_file(path)

print("Elapsed time: ", datetime.datetime.now()-start)

print("Total Elapsed Time: ", datetime.datetime.now()-globstart)

with open(f"{tmpDirectory}/log.txt", 'a') as file:
    file.write(f"OUTLETSdischarge.py Elapsed Time: {str(datetime.datetime.now()-globstart)}\n")
