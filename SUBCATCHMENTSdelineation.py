# Copyright (c) Quentin DASSIBAT <qdassibat@gmail.com>

#Ecole des Mines de Saint-Etienne (EMSE)
#Ecole Nationale des Travaux Publics de l'Etat (ENTPE)
#Ecole Urbaine de Lyon (EUL)

# Source Code License (GPLv3)

#This software and its source code are licensed under the GNU General Public License (GPL), version 3.0 or later. See the LICENSE file for details.

# Output License (CC BY 4.0)

#Any outputs generated by this software, such as data files, images, or other results, are licensed under the Creative Commons Attribution 4.0 International License (CC BY 4.0).

#You are free to share, adapt, and use these outputs, provided you give appropriate credit to the original author(s). See the LICENSE file for details.

# For details about each license, please refer to:
#- GNU General Public License (GPL), version 3.0: https://www.gnu.org/licenses/gpl-3.0.html
#- Creative Commons Attribution 4.0 International License (CC BY 4.0): http://creativecommons.org/licenses/by/4.0/ 


##################
# Set parameters #
##################

#Import libraries
import os
import relio
import numpy as np
import geopandas as gpd
from osgeo import gdal, osr
gdal.UseExceptions()
import datetime

#Set path and working directories
wd = os.getcwd()
InputModelDirectory = f"{wd}/MODEL_inputs"
hydrographicDirectory = f"{wd}/HYDRO_inputs"

tmpDirectory = f"{wd}/tmp"
if os.path.isdir(tmpDirectory) is False:
    os.mkdir(f"{wd}/tmp")
else:
    pass

outputDirectory = f"{wd}/RESAMPLINGoutputs"
if os.path.isdir(outputDirectory) is False:
    os.mkdir(f"{wd}/RESAMPLINGoutputs")
else:
    pass

#Set parameters
EPSG = 4326
epsilonAccuflux = 1e3
epsilonOutlet = 1e3
modelRun = "DIST"
bandNumber = 1


##################
# Execute module #
##################
globstart = datetime.datetime.now()

print("Load OutletsLocations layer and extract only outflow outlets flowing out of the AoI")
df = gpd.read_file(f"{outputDirectory}/OutletsLocations_sup{str(epsilonOutlet)}_mod{modelRun}_band{str(bandNumber)}_points.gpkg")
mask = df['OUTflow'] == "True"
outlets = df.loc[mask]
outlets.to_file(f"{outputDirectory}/OutletsLocations_sup{str(epsilonOutlet)}_mod{modelRun}_band{str(bandNumber)}_points_OUTflowIsTrue.gpkg")
del df, mask, outlets

print("Create subcatchments based on previously identified outlets")
src = f"{outputDirectory}/OutletsLocations_sup{str(epsilonOutlet)}_mod{modelRun}_band{str(bandNumber)}_points_OUTflowIsTrue.gpkg"
flowdir = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_pcraster_flowdir.map"
clone = f"{hydrographicDirectory}/DEMx_SRTM30_wgs84_pcraster.map"
dst = f"{outputDirectory}/OutletsLocations_sup{str(epsilonOutlet)}_mod{modelRun}_band{str(bandNumber)}_subcatchments.map"
relio.create_subcatchments(src,flowdir,dst,clone)
del src, flowdir, dst, clone

print("Total Elapsed Time: ", datetime.datetime.now()-globstart)

with open(f"{tmpDirectory}/log.txt", 'a') as file:
    file.write(f"SUBCATCHMENTSdelineation.py Elapsed Time: {str(datetime.datetime.now()-globstart)}\n")
